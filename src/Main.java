import java.io.File;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Class Main
 * Processes the input files generated by GenerateInfoFiles and creates comprehensive reports.
 * Generates TXT and CSV reports with analysis and statistics for Products and Salesmen.
 * 
 * @author Conceptos Fundamentales de Programaci√≥n
 * @version 2.0 - Weeks 7-8 Final Delivery
 */
public class Main {
    // Constants
    private static final String OUTPUT_DIR = "output";
    private static final String INPUT_DIR = "input";
    private static final String ENCODING = "UTF-8";

    public static void main(String[] args) {
        System.out.println("=".repeat(70));
        System.out.println("DATA PROCESSING AND REPORT GENERATION - WEEKS 7-8");
        System.out.println("=".repeat(70));
        
        try {
            // Create output directory
            File outputDir = new File(OUTPUT_DIR);
            if (!outputDir.exists()) {
                if (outputDir.mkdirs()) {
                    System.out.println("[OK] Created directory: " + OUTPUT_DIR);
                }
            }

            // Process all data files
            processProductData();
            processSalesmenData();
            processSalesRecords();
            generateExecutiveSummary();

            System.out.println("=".repeat(70));
            System.out.println("All reports successfully created in ./" + OUTPUT_DIR);
            System.out.println("=".repeat(70));
            
        } catch (Exception e) {
            System.err.println("[ERROR] Error in Main: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Processes product data and generates product reports.
     */
    private static void processProductData() {
        try {
            System.out.println("\n[PROCESSING] Product Data...");
            
            List<ProductModel> products = loadProducts();
            
            if (products.isEmpty()) {
                System.out.println("[WARNING] No product data found.");
                return;
            }

            // Generate TXT Report
            generateProductTxtReport(products);
            
            // Generate CSV Report
            generateProductCsvReport(products);
            
            System.out.println("[OK] Product reports generated (" + products.size() + " products)");
            
        } catch (Exception e) {
            System.err.println("[ERROR] Processing product data: " + e.getMessage());
        }
    }

    /**
     * Loads products from input files.
     */
    private static List<ProductModel> loadProducts() throws Exception {
        List<ProductModel> products = new ArrayList<ProductModel>();
        Path productsPath = Paths.get(INPUT_DIR + "/products.txt");
        
        if (!Files.exists(productsPath)) {
            // Fallback to data.csv
            productsPath = Paths.get(INPUT_DIR + "/data.csv");
        }
        
        if (!Files.exists(productsPath)) {
            return products; // Return empty list
        }
        
        List<String> lines = Files.readAllLines(productsPath);
        
        for (String line : lines) {
            // Skip comments and headers
            if (line.trim().isEmpty() || line.startsWith("#") || 
                line.contains("ProductName") || line.contains("Format:")) {
                continue;
            }
            
            try {
                String[] parts = line.split("[|;]");
                if (parts.length >= 4) {
                    String name = parts[0].trim();
                    double price = Double.parseDouble(parts[1].trim());
                    int quantity = Integer.parseInt(parts[2].trim());
                    String category = parts[3].trim();
                    
                    ProductModel product = new ProductModel(name, price, quantity, category);
                    products.add(product);
                }
            } catch (Exception e) {
                System.err.println("[WARNING] Skipping invalid product line: " + line);
            }
        }
        
        return products;
    }

    /**
     * Generates detailed TXT report for products.
     */
    private static void generateProductTxtReport(List<ProductModel> products) throws Exception {
        PrintWriter writer = new PrintWriter(OUTPUT_DIR + "/product_report.txt", ENCODING);
        
        writer.println("=".repeat(70));
        writer.println("PRODUCT INVENTORY REPORT");
        writer.println("=".repeat(70));
        writer.println();
        
        // Statistics
        double totalValue = 0;
        int totalQuantity = 0;
        int lowStockCount = 0;
        int outOfStockCount = 0;
        Map<String, Integer> categoryCount = new HashMap<String, Integer>();
        
        for (ProductModel product : products) {
            totalValue += product.calculateTotalValue();
            totalQuantity += product.getQuantity();
            if (!product.isInStock()) {
                outOfStockCount++;
            } else if (product.isLowStock()) {
                lowStockCount++;
            }
            
            String category = product.getCategory();
            categoryCount.put(category, categoryCount.getOrDefault(category, 0) + 1);
        }
        
        // Summary
        writer.println("SUMMARY");
        writer.println("-".repeat(70));
        writer.println("Total Products: " + products.size());
        writer.println("Total Inventory Value: $" + String.format("%.2f", totalValue));
        writer.println("Total Units in Stock: " + totalQuantity);
        writer.println("Out of Stock Products: " + outOfStockCount);
        writer.println("Low Stock Products: " + lowStockCount);
        writer.println();
        
        writer.println("PRODUCTS BY CATEGORY");
        writer.println("-".repeat(70));
        for (Map.Entry<String, Integer> entry : categoryCount.entrySet()) {
            writer.println(entry.getKey() + ": " + entry.getValue() + " products");
        }
        writer.println();
        
        // Detailed product list
        writer.println("DETAILED PRODUCT LIST");
        writer.println("-".repeat(70));
        
        // Sort by value descending
        products.sort(Comparator.comparingDouble(ProductModel::calculateTotalValue).reversed());
        
        for (ProductModel product : products) {
            writer.println(product.toDetailedString());
            writer.println("-".repeat(70));
        }
        
        writer.close();
    }

    /**
     * Generates CSV report for products.
     */
    private static void generateProductCsvReport(List<ProductModel> products) throws Exception {
        PrintWriter writer = new PrintWriter(OUTPUT_DIR + "/product_report.csv", ENCODING);
        
        writer.println("ProductName;Price;Quantity;Category;TotalValue;StockStatus");
        
        for (ProductModel product : products) {
            String status = product.isInStock() ? 
                (product.isLowStock() ? "Low Stock" : "In Stock") : "Out of Stock";
            
            writer.println(String.format("%s;%.2f;%d;%s;%.2f;%s",
                product.getName(), product.getPrice(), product.getQuantity(),
                product.getCategory(), product.calculateTotalValue(), status));
        }
        
        writer.close();
    }

    /**
     * Processes salesmen data and generates reports.
     */
    private static void processSalesmenData() {
        try {
            System.out.println("\n[PROCESSING] Salesmen Data...");
            
            List<SalesmanModel> salesmen = loadSalesmen();
            
            if (salesmen.isEmpty()) {
                System.out.println("[WARNING] No salesmen data found.");
                return;
            }

            // Generate reports
            generateSalesmenTxtReport(salesmen);
            generateSalesmenCsvReport(salesmen);
            
            System.out.println("[OK] Salesmen reports generated (" + salesmen.size() + " salesmen)");
            
        } catch (Exception e) {
            System.err.println("[ERROR] Processing salesmen data: " + e.getMessage());
        }
    }

    /**
     * Loads salesmen from input files.
     */
    private static List<SalesmanModel> loadSalesmen() throws Exception {
        List<SalesmanModel> salesmen = new ArrayList<SalesmanModel>();
        Path salesmenPath = Paths.get(INPUT_DIR + "/salesmen.txt");
        
        if (!Files.exists(salesmenPath)) {
            return salesmen;
        }
        
        List<String> lines = Files.readAllLines(salesmenPath);
        
        for (String line : lines) {
            if (line.trim().isEmpty() || line.startsWith("#")) {
                continue;
            }
            
            try {
                String[] parts = line.split("\\|");
                if (parts.length >= 5) {
                    String id = parts[0].trim();
                    String name = parts[1].trim();
                    int salesCount = Integer.parseInt(parts[2].trim());
                    double revenue = Double.parseDouble(parts[3].trim());
                    String region = parts[4].trim();
                    
                    SalesmanModel salesman = new SalesmanModel(id, name, salesCount, revenue, region);
                    salesmen.add(salesman);
                }
            } catch (Exception e) {
                System.err.println("[WARNING] Skipping invalid salesman line: " + line);
            }
        }
        
        return salesmen;
    }

    /**
     * Generates detailed TXT report for salesmen.
     */
    private static void generateSalesmenTxtReport(List<SalesmanModel> salesmen) throws Exception {
        PrintWriter writer = new PrintWriter(OUTPUT_DIR + "/salesmen_report.txt", ENCODING);
        
        writer.println("=".repeat(70));
        writer.println("SALESMEN PERFORMANCE REPORT");
        writer.println("=".repeat(70));
        writer.println();
        
        // Statistics
        double totalRevenue = 0;
        int totalSales = 0;
        int bonusQualified = 0;
        double totalCommissions = 0;
        Map<String, Integer> regionCount = new HashMap<String, Integer>();
        
        for (SalesmanModel salesman : salesmen) {
            totalRevenue += salesman.getTotalRevenue();
            totalSales += salesman.getSalesCount();
            totalCommissions += salesman.calculateCommission();
            if (salesman.qualifiesForBonus()) {
                bonusQualified++;
            }
            
            String region = salesman.getRegion();
            regionCount.put(region, regionCount.getOrDefault(region, 0) + 1);
        }
        
        // Summary
        writer.println("SUMMARY");
        writer.println("-".repeat(70));
        writer.println("Total Salesmen: " + salesmen.size());
        writer.println("Total Revenue Generated: $" + String.format("%.2f", totalRevenue));
        writer.println("Total Sales Count: " + totalSales);
        writer.println("Total Commissions: $" + String.format("%.2f", totalCommissions));
        writer.println("Salesmen Qualifying for Bonus: " + bonusQualified);
        writer.println("Average Revenue per Salesman: $" + 
            String.format("%.2f", totalRevenue / salesmen.size()));
        writer.println();
        
        writer.println("SALESMEN BY REGION");
        writer.println("-".repeat(70));
        for (Map.Entry<String, Integer> entry : regionCount.entrySet()) {
            writer.println(entry.getKey() + ": " + entry.getValue() + " salesmen");
        }
        writer.println();
        
        // Top performers
        writer.println("TOP PERFORMERS (by Revenue)");
        writer.println("-".repeat(70));
        
        salesmen.sort(Comparator.comparingDouble(SalesmanModel::getTotalRevenue).reversed());
        
        int topCount = Math.min(5, salesmen.size());
        for (int i = 0; i < topCount; i++) {
            writer.println((i + 1) + ". " + salesmen.get(i).toString());
        }
        writer.println();
        
        // Detailed list
        writer.println("DETAILED SALESMEN LIST");
        writer.println("-".repeat(70));
        
        for (SalesmanModel salesman : salesmen) {
            writer.println(salesman.toDetailedString());
            writer.println("-".repeat(70));
        }
        
        writer.close();
    }

    /**
     * Generates CSV report for salesmen.
     */
    private static void generateSalesmenCsvReport(List<SalesmanModel> salesmen) throws Exception {
        PrintWriter writer = new PrintWriter(OUTPUT_DIR + "/salesmen_report.csv", ENCODING);
        
        writer.println("SalesmanID;Name;Region;SalesCount;TotalRevenue;AverageSale;Commission;Bonus;TotalEarnings");
        
        for (SalesmanModel salesman : salesmen) {
            double bonus = salesman.qualifiesForBonus() ? 5000.0 : 0.0;
            
            writer.println(String.format("%s;%s;%s;%d;%.2f;%.2f;%.2f;%.2f;%.2f",
                salesman.getSalesmanId(), salesman.getName(), salesman.getRegion(),
                salesman.getSalesCount(), salesman.getTotalRevenue(),
                salesman.getAverageSaleAmount(), salesman.calculateCommission(),
                bonus, salesman.calculateTotalEarnings()));
        }
        
        writer.close();
    }

    /**
     * Processes sales records and generates consolidated report.
     */
    private static void processSalesRecords() {
        try {
            System.out.println("\n[PROCESSING] Sales Records...");
            
            Path salesPath = Paths.get(INPUT_DIR + "/sales_records.csv");
            
            if (!Files.exists(salesPath)) {
                System.out.println("[WARNING] No sales records found.");
                return;
            }
            
            List<String> lines = Files.readAllLines(salesPath);
            PrintWriter writer = new PrintWriter(OUTPUT_DIR + "/sales_records_report.txt", ENCODING);
            
            writer.println("=".repeat(70));
            writer.println("SALES RECORDS REPORT");
            writer.println("=".repeat(70));
            writer.println();
            
            double grandTotal = 0;
            int recordCount = 0;
            
            for (String line : lines) {
                if (line.contains("SaleID") || line.trim().isEmpty()) {
                    continue;
                }
                
                String[] parts = line.split(";");
                if (parts.length >= 7) {
                    double amount = Double.parseDouble(parts[6].trim());
                    grandTotal += amount;
                    recordCount++;
                    
                    writer.println(String.format("Sale #%s | %s | %s | %s x %s = $%.2f | %s",
                        parts[0], parts[2], parts[3], parts[4], parts[5], amount, parts[7]));
                }
            }
            
            writer.println();
            writer.println("-".repeat(70));
            writer.println("TOTAL SALES: " + recordCount);
            writer.println("GRAND TOTAL: $" + String.format("%.2f", grandTotal));
            writer.println("AVERAGE SALE: $" + String.format("%.2f", grandTotal / recordCount));
            
            writer.close();
            
            System.out.println("[OK] Sales records report generated (" + recordCount + " records)");
            
        } catch (Exception e) {
            System.err.println("[ERROR] Processing sales records: " + e.getMessage());
        }
    }

    /**
     * Generates executive summary combining all data.
     */
    private static void generateExecutiveSummary() {
        try {
            System.out.println("\n[PROCESSING] Executive Summary...");
            
            PrintWriter writer = new PrintWriter(OUTPUT_DIR + "/executive_summary.txt", ENCODING);
            
            writer.println("=".repeat(70));
            writer.println("EXECUTIVE SUMMARY - FINAL REPORT");
            writer.println("Conceptos Fundamentales de Programaci√≥n - Weeks 7-8");
            writer.println("=".repeat(70));
            writer.println();
            
            writer.println("This project demonstrates:");
            writer.println("  ‚úì Object-Oriented Programming with model classes");
            writer.println("  ‚úì File I/O operations (reading and writing TXT/CSV files)");
            writer.println("  ‚úì Data validation and error handling");
            writer.println("  ‚úì Data processing and analysis");
            writer.println("  ‚úì Report generation in multiple formats");
            writer.println("  ‚úì Best practices: constants, encapsulation, documentation");
            writer.println();
            
            writer.println("Generated Reports:");
            writer.println("  ‚Ä¢ product_report.txt - Detailed product inventory analysis");
            writer.println("  ‚Ä¢ product_report.csv - Product data in CSV format");
            writer.println("  ‚Ä¢ salesmen_report.txt - Salesmen performance analysis");
            writer.println("  ‚Ä¢ salesmen_report.csv - Salesmen data in CSV format");
            writer.println("  ‚Ä¢ sales_records_report.txt - Individual sales transactions");
            writer.println("  ‚Ä¢ executive_summary.txt - This summary document");
            writer.println();
            
            writer.println("Project Structure:");
            writer.println("  src/");
            writer.println("    ‚îú‚îÄ‚îÄ Main.java - Main processing and reporting");
            writer.println("    ‚îú‚îÄ‚îÄ GenerateInfoFiles.java - Data generation");
            writer.println("    ‚îú‚îÄ‚îÄ ProductModel.java - Product entity with business logic");
            writer.println("    ‚îî‚îÄ‚îÄ SalesmanModel.java - Salesman entity with business logic");
            writer.println();
            
            writer.println("=".repeat(70));
            writer.println("End of Executive Summary");
            writer.println("=".repeat(70));
            
            writer.close();
            
            System.out.println("[OK] Executive summary generated");
            
        } catch (Exception e) {
            System.err.println("[ERROR] Generating executive summary: " + e.getMessage());
        }
    }
}
